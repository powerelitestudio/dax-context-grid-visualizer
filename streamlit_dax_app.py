# streamlit_dax_app.py

import streamlit as st
import re
import networkx as nx
import matplotlib.pyplot as plt
import matplotlib
import os # Importar os para verificar el PATH
import sys # Importar sys para la versi√≥n de Python

matplotlib.use('Agg')

# --- SECCI√ìN DE DIAGN√ìSTICO DE PYDOTPLUS/GRAPHVIZ ---
st.sidebar.subheader("Diagn√≥stico de Graphviz/Pydot")
try:
    import pydotplus
    st.sidebar.success("‚úÖ pydotplus importado correctamente.")
    
    # Intentar encontrar Graphviz
    # find_graphviz() devuelve un diccionario con las rutas a los ejecutables si los encuentra
    graphviz_check_result = pydotplus.find_graphviz() 
    
    if graphviz_check_result:
        st.sidebar.write("`pydotplus.find_graphviz()` encontr√≥:")
        # Convertir a strings para evitar problemas de serializaci√≥n con st.json
        stringified_result = {k: str(v) for k, v in graphviz_check_result.items()}
        st.sidebar.json(stringified_result)
        if 'dot' in graphviz_check_result and graphviz_check_result['dot'] is not None:
            st.sidebar.success(f"‚úÖ 'dot' ejecutable encontrado en: {graphviz_check_result['dot']}")
            HAS_PYDOT_AND_GRAPHVIZ_FLAG = True
        else:
            st.sidebar.error("‚ùå 'dot' NO encontrado por `pydotplus.find_graphviz()`.")
            HAS_PYDOT_AND_GRAPHVIZ_FLAG = False
    else:
        st.sidebar.error("‚ùå `pydotplus.find_graphviz()` devolvi√≥ None o un resultado vac√≠o.")
        HAS_PYDOT_AND_GRAPHVIZ_FLAG = False
        
    # Verificar importaci√≥n de graphviz_layout de NetworkX
    from networkx.drawing.nx_pydot import graphviz_layout
    st.sidebar.success("‚úÖ `nx_pydot.graphviz_layout` importado.")
    
    if not HAS_PYDOT_AND_GRAPHVIZ_FLAG: # Si find_graphviz fall√≥, la bandera global debe ser False
         raise Exception("Fallo en encontrar 'dot' con pydotplus.find_graphviz()")

except ImportError as ie:
    st.sidebar.error(f"ImportError: {ie}")
    HAS_PYDOT_AND_GRAPHVIZ_FLAG = False
except Exception as e:
    st.sidebar.error(f"Excepci√≥n durante chequeo de Graphviz/Pydot: {e}")
    HAS_PYDOT_AND_GRAPHVIZ_FLAG = False

# Usamos la nueva bandera para la l√≥gica de la app
HAS_PYDOT_AND_GRAPHVIZ = HAS_PYDOT_AND_GRAPHVIZ_FLAG
if HAS_PYDOT_AND_GRAPHVIZ:
    st.sidebar.success("üéâ ¬°Graphviz y pydotplus parecen estar listos para el layout jer√°rquico!")
else:
    st.sidebar.error("‚ö†Ô∏è Graphviz/pydotplus no est√°n listos. Se usar√° layout alternativo.")
# --- FIN DE SECCI√ìN DE DIAGN√ìSTICO ---


# ... (resto de tu c√≥digo: parse_visual_shape, create_precise_lattice_figure, interfaz de Streamlit) ...
# Aseg√∫rate de que la funci√≥n create_precise_lattice_figure y la l√≥gica principal usen
# esta variable global HAS_PYDOT_AND_GRAPHVIZ actualizada.
# Por ejemplo, dentro de create_precise_lattice_figure, cuando decides qu√© layout usar:
# if HAS_PYDOT_AND_GRAPHVIZ and G.number_of_nodes() > 0 :
#    try:
#        pos = graphviz_layout(G, prog='dot') # Aqu√≠ se usa la variable global
# ...

# Y en la UI principal donde muestras la advertencia:
# if st.button("üîç Generar Gr√°fico del Reticulado"):
#    if dax_clause_input.strip():
#        if not HAS_PYDOT_AND_GRAPHVIZ: # Usa la variable global actualizada
#            st.warning(
#                "Advertencia: `pydotplus` o Graphviz no est√°n correctamente configurados..."
#            )
# ... (el resto de tu c√≥digo)
